/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CoinsLeagueFactoryInterface extends ethers.utils.Interface {
  functions: {
    "coinsLeague(uint256)": FunctionFragment;
    "createGame(uint8,uint256,uint256,uint8,uint256)": FunctionFragment;
    "getGames(uint256,uint256)": FunctionFragment;
    "totalGames()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "coinsLeague",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGames",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalGames",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "coinsLeague",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalGames", data: BytesLike): Result;

  events: {
    "GameCreated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
}

export class CoinsLeagueFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  listeners<T, G>(
    eventFilter?: TypedEventFilter<T, G>
  ): Array<TypedListener<T, G>>;
  off<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  on<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  once<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeListener<T, G>(
    eventFilter: TypedEventFilter<T, G>,
    listener: TypedListener<T, G>
  ): this;
  removeAllListeners<T, G>(eventFilter: TypedEventFilter<T, G>): this;

  queryFilter<T, G>(
    event: TypedEventFilter<T, G>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<T & G>>>;

  interface: CoinsLeagueFactoryInterface;

  functions: {
    coinsLeague(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "coinsLeague(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createGame(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createGame(uint8,uint256,uint256,uint8,uint256)"(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getGames(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getGames(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalGames(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalGames()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  coinsLeague(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "coinsLeague(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createGame(
    _num_players: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    _num_coins: BigNumberish,
    _abort_timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createGame(uint8,uint256,uint256,uint8,uint256)"(
    _num_players: BigNumberish,
    _duration: BigNumberish,
    _amount: BigNumberish,
    _num_coins: BigNumberish,
    _abort_timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getGames(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getGames(uint256,uint256)"(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalGames(overrides?: CallOverrides): Promise<BigNumber>;

  "totalGames()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    coinsLeague(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "coinsLeague(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createGame(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "createGame(uint8,uint256,uint256,uint8,uint256)"(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGames(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getGames(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    totalGames(overrides?: CallOverrides): Promise<BigNumber>;

    "totalGames()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    GameCreated(
      gameAddress: null,
      id: null
    ): TypedEventFilter<
      [string, BigNumber],
      { gameAddress: string; id: BigNumber }
    >;
  };

  estimateGas: {
    coinsLeague(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "coinsLeague(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGame(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createGame(uint8,uint256,uint256,uint8,uint256)"(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getGames(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getGames(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalGames(overrides?: CallOverrides): Promise<BigNumber>;

    "totalGames()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    coinsLeague(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "coinsLeague(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGame(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createGame(uint8,uint256,uint256,uint8,uint256)"(
      _num_players: BigNumberish,
      _duration: BigNumberish,
      _amount: BigNumberish,
      _num_coins: BigNumberish,
      _abort_timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getGames(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getGames(uint256,uint256)"(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalGames()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
